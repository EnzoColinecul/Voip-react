// Simple user configuration //

 const getAudioElement = (id: string): HTMLAudioElement => {
    const audioElement = document.getElementById(id)
    if (!(audioElement instanceof HTMLAudioElement)) {
      throw new Error("Element not found");
    }
    return audioElement
    console.log(audioElement);

  }
  async function wait(ms: number): Promise<void> {
    return new Promise((resolve) => {
      setTimeout(resolve, ms);
    });
  }


  async function main(): Promise<void> {

    // SIP over WebSocket Server URL
    // The URL of a SIP over WebSocket server which will complete the call.
    // FreeSwitch is an example of a server which supports SIP over WebSocket.
    // SIP over WebSocket is an internet standard the details of which are
    // outside the scope of this documentation, but there are many resources
    // available. See: https://tools.ietf.org/html/rfc7118 for the specification.
    const server = "ws://192.168.1.102:8088/ws";

    // SIP Request URI
    // The SIP Request URI of the destination. It's "Who you wanna call?"
    // SIP is an internet standard the details of which are outside the
    // scope of this documentation, but there are many resources available.
    // See: https://tools.ietf.org/html/rfc3261 for the specification.
    const destination = "sip:103@192.168.1.102";

    // SIP Address of Record (AOR)
    // This is the user's SIP address. It's "Where people can reach you."
    // SIP is an internet standard the details of which are outside the
    // scope of this documentation, but there are many resources available.
    // See: https://tools.ietf.org/html/rfc3261 for the specification.
    const aor = "sip:101@192.168.1.102";

    // Configuration Options
    // These are configuration options for the `SimpleUser` instance.
    // Here we are setting the HTML audio element we want to use to
    // play the audio received from the remote end of the call.
    // An audio element is needed to play the audio received from the
    // remote end of the call. Once the call is established, a `MediaStream`
    // is attached to the provided audio element's `src` attribute.
    const options: Web.SimpleUserOptions = {
      aor,
      media: {
        constraints: { audio: true, video: false },
        remote: {
          audio: getAudioElement("remoteAudio"),
        },
      }
    };

    // Construct a SimpleUser instance
    const simpleUser = new Web.SimpleUser(server, options);

    // Supply delegate to handle inbound calls (optional)
    simpleUser.delegate = {
      onCallReceived: async () => {
        await simpleUser.answer();
      }
    };

    // Connect to server
    await simpleUser.connect();

    // Register to receive inbound calls (optional)
    await simpleUser.register();

    // Place call to the destination
    await simpleUser.call(destination);

    // Wait some number of milliseconds
    await wait(5000);

    // Hangup call
    await simpleUser.hangup();
  }

  // Run it
  main()
    .then(() => console.log(`Success`))
    .catch((error: Error) => console.error(`Failure`, error));

// End SimpleUser configuration //